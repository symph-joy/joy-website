/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["amp"],{

/***/ "../joy/dist/build/polyfills/fetch/index.js":
/*!**************************************************!*\
  !*** ../joy/dist/build/polyfills/fetch/index.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n/* globals self */\n\nvar fetch = self.fetch.bind(self);\nmodule.exports = fetch;\nmodule.exports[\"default\"] = module.exports;\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vam95L2Rpc3QvYnVpbGQvcG9seWZpbGxzL2ZldGNoL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiOztBQUNBLElBQUlBLEtBQUssR0FBR0MsSUFBSSxDQUFDRCxLQUFMLENBQVdFLElBQVgsQ0FBZ0JELElBQWhCLENBQVo7QUFDQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSixLQUFqQjtBQUNBRyx5QkFBQSxHQUF5QkEsTUFBTSxDQUFDQyxPQUFoQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9qb3kvZGlzdC9idWlsZC9wb2x5ZmlsbHMvZmV0Y2gvaW5kZXguanM/M2FhYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIGdsb2JhbHMgc2VsZiAqL1xudmFyIGZldGNoID0gc2VsZi5mZXRjaC5iaW5kKHNlbGYpO1xubW9kdWxlLmV4cG9ydHMgPSBmZXRjaDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBtb2R1bGUuZXhwb3J0cztcbiJdLCJuYW1lcyI6WyJmZXRjaCIsInNlbGYiLCJiaW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../joy/dist/build/polyfills/fetch/index.js\n");

/***/ }),

/***/ "../joy/dist/client/dev/amp-dev.js":
/*!*****************************************!*\
  !*** ../joy/dist/client/dev/amp-dev.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n\nvar _regeneratorRuntime = __webpack_require__(/*! @babel/runtime/regenerator */ \"../joy/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/* globals __webpack_hash__ */\n\nvar fetch_1 = __importDefault(__webpack_require__(/*! ../../build/polyfills/fetch */ \"../joy/dist/build/polyfills/fetch/index.js\"));\n\nvar event_source_polyfill_1 = __importDefault(__webpack_require__(/*! ./event-source-polyfill */ \"../joy/dist/client/dev/event-source-polyfill.js\"));\n\nvar eventsource_1 = __webpack_require__(/*! ./error-overlay/eventsource */ \"../joy/dist/client/dev/error-overlay/eventsource.js\");\n\nvar on_demand_entries_utils_1 = __webpack_require__(/*! ./on-demand-entries-utils */ \"../joy/dist/client/dev/on-demand-entries-utils.js\");\n\nvar fouc_1 = __webpack_require__(/*! ./fouc */ \"../joy/dist/client/dev/fouc.js\");\n\nif (!window.EventSource) {\n  window.EventSource = event_source_polyfill_1[\"default\"];\n}\n\nvar data = JSON.parse(document.getElementById(\"__JOY_DATA__\").textContent);\nvar assetPrefix = data.assetPrefix,\n    page = data.page;\nassetPrefix = assetPrefix || \"\";\nvar mostRecentHash = null;\n/* eslint-disable-next-line */\n\nvar curHash = __webpack_require__.h();\nvar hotUpdatePath = assetPrefix + (assetPrefix.endsWith(\"/\") ? \"\" : \"/\") + \"_joy/static/webpack/\"; // Is there a newer version of this code available?\n\nfunction isUpdateAvailable() {\n  // __webpack_hash__ is the hash of the current compilation.\n  // It's a global variable injected by Webpack.\n\n  /* eslint-disable-next-line */\n  return mostRecentHash !== __webpack_require__.h();\n} // Webpack disallows updates in other states.\n\n\nfunction canApplyUpdates() {\n  return module.hot.status() === \"idle\";\n} // This function reads code updates on the fly and hard\n// reloads the page when it has changed.\n\n\nfunction tryApplyUpdates() {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res, jsonData, curPage, pageUpdated;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!isUpdateAvailable() || !canApplyUpdates())) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.prev = 2;\n            _context.next = 5;\n            return (0, fetch_1[\"default\"])(\"\" + hotUpdatePath + curHash + \".hot-update.json\");\n\n          case 5:\n            res = _context.sent;\n            _context.next = 8;\n            return res.json();\n\n          case 8:\n            jsonData = _context.sent;\n            curPage = page === \"/\" ? \"index\" : page; // webpack 5 uses an array instead\n\n            pageUpdated = (Array.isArray(jsonData.c) ? jsonData.c : Object.keys(jsonData.c)).some(function (mod) {\n              return mod.indexOf(\"pages\" + (curPage.substr(0, 1) === \"/\" ? curPage : \"/\" + curPage)) !== -1 || mod.indexOf((\"pages\" + (curPage.substr(0, 1) === \"/\" ? curPage : \"/\" + curPage)).replace(/\\//g, \"\\\\\")) !== -1;\n            });\n\n            if (pageUpdated) {\n              document.location.reload(true);\n            } else {\n              curHash = mostRecentHash;\n            }\n\n            _context.next = 18;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](2);\n            console.error(\"Error occurred checking for update\", _context.t0);\n            document.location.reload(true);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 14]]);\n  }));\n}\n\n(0, eventsource_1.getEventSourceWrapper)({\n  path: assetPrefix + \"/_joy/webpack-hmr\"\n}).addMessageListener(function (event) {\n  if (event.data === \"\\uD83D\\uDC93\") {\n    return;\n  }\n\n  try {\n    var message = JSON.parse(event.data);\n\n    if (message.action === \"sync\" || message.action === \"built\") {\n      if (!message.hash) {\n        return;\n      }\n\n      mostRecentHash = message.hash;\n      tryApplyUpdates();\n    } else if (message.action === \"reloadPage\") {\n      document.location.reload(true);\n    }\n  } catch (ex) {\n    console.warn(\"Invalid HMR message: \" + event.data + \"\\n\" + ex);\n  }\n});\n(0, on_demand_entries_utils_1.setupPing)(assetPrefix, function () {\n  return page;\n});\n(0, fouc_1.displayContent)();\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../joy/dist/client/dev/amp-dev.js\n");

/***/ }),

/***/ "../joy/dist/client/dev/error-overlay/eventsource.js":
/*!***********************************************************!*\
  !*** ../joy/dist/client/dev/error-overlay/eventsource.js ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getEventSourceWrapper = void 0;\nvar eventCallbacks = [];\n\nfunction EventSourceWrapper(options) {\n  var source;\n  var lastActivity = new Date();\n  var listeners = [];\n\n  if (!options.timeout) {\n    options.timeout = 20 * 1000;\n  }\n\n  init();\n  var timer = setInterval(function () {\n    if (new Date() - lastActivity > options.timeout) {\n      handleDisconnect();\n    }\n  }, options.timeout / 2);\n\n  function init() {\n    source = new window.EventSource(options.path);\n    source.onopen = handleOnline;\n    source.onerror = handleDisconnect;\n    source.onmessage = handleMessage;\n  }\n\n  function handleOnline() {\n    if (options.log) console.log(\"[HMR] connected\");\n    lastActivity = new Date();\n  }\n\n  function handleMessage(event) {\n    lastActivity = new Date();\n\n    for (var i = 0; i < listeners.length; i++) {\n      listeners[i](event);\n    }\n\n    eventCallbacks.forEach(function (cb) {\n      if (!cb.unfiltered && event.data.indexOf(\"action\") === -1) return;\n      cb(event);\n    });\n  }\n\n  function handleDisconnect() {\n    clearInterval(timer);\n    source.close();\n    setTimeout(init, options.timeout);\n  }\n\n  return {\n    close: function close() {\n      clearInterval(timer);\n      source.close();\n    },\n    addMessageListener: function addMessageListener(fn) {\n      listeners.push(fn);\n    }\n  };\n}\n\n_c = EventSourceWrapper;\n\nfunction getEventSourceWrapper(options) {\n  if (!options.ondemand) {\n    return {\n      addMessageListener: function addMessageListener(cb) {\n        eventCallbacks.push(cb);\n      }\n    };\n  }\n\n  return EventSourceWrapper(options);\n}\n\nexports.getEventSourceWrapper = getEventSourceWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventSourceWrapper\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vam95L2Rpc3QvY2xpZW50L2Rldi9lcnJvci1vdmVybGF5L2V2ZW50c291cmNlLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTs7QUFDYkEsOENBQTZDO0FBQUVHLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDO0FBQ0FELDZCQUFBLEdBQWdDLEtBQUssQ0FBckM7QUFDQSxJQUFNRyxjQUFjLEdBQUcsRUFBdkI7O0FBQ0EsU0FBU0Msa0JBQVQsQ0FBNEJDLE9BQTVCLEVBQXFDO0FBQ2pDLE1BQUlDLE1BQUo7QUFDQSxNQUFJQyxZQUFZLEdBQUcsSUFBSUMsSUFBSixFQUFuQjtBQUNBLE1BQUlDLFNBQVMsR0FBRyxFQUFoQjs7QUFDQSxNQUFJLENBQUNKLE9BQU8sQ0FBQ0ssT0FBYixFQUFzQjtBQUNsQkwsSUFBQUEsT0FBTyxDQUFDSyxPQUFSLEdBQWtCLEtBQUssSUFBdkI7QUFDSDs7QUFDREMsRUFBQUEsSUFBSTtBQUNKLE1BQUlDLEtBQUssR0FBR0MsV0FBVyxDQUFDLFlBQVk7QUFDaEMsUUFBSSxJQUFJTCxJQUFKLEtBQWFELFlBQWIsR0FBNEJGLE9BQU8sQ0FBQ0ssT0FBeEMsRUFBaUQ7QUFDN0NJLE1BQUFBLGdCQUFnQjtBQUNuQjtBQUNKLEdBSnNCLEVBSXBCVCxPQUFPLENBQUNLLE9BQVIsR0FBa0IsQ0FKRSxDQUF2Qjs7QUFLQSxXQUFTQyxJQUFULEdBQWdCO0FBQ1pMLElBQUFBLE1BQU0sR0FBRyxJQUFJUyxNQUFNLENBQUNDLFdBQVgsQ0FBdUJYLE9BQU8sQ0FBQ1ksSUFBL0IsQ0FBVDtBQUNBWCxJQUFBQSxNQUFNLENBQUNZLE1BQVAsR0FBZ0JDLFlBQWhCO0FBQ0FiLElBQUFBLE1BQU0sQ0FBQ2MsT0FBUCxHQUFpQk4sZ0JBQWpCO0FBQ0FSLElBQUFBLE1BQU0sQ0FBQ2UsU0FBUCxHQUFtQkMsYUFBbkI7QUFDSDs7QUFDRCxXQUFTSCxZQUFULEdBQXdCO0FBQ3BCLFFBQUlkLE9BQU8sQ0FBQ2tCLEdBQVosRUFDSUMsT0FBTyxDQUFDRCxHQUFSLENBQVksaUJBQVo7QUFDSmhCLElBQUFBLFlBQVksR0FBRyxJQUFJQyxJQUFKLEVBQWY7QUFDSDs7QUFDRCxXQUFTYyxhQUFULENBQXVCRyxLQUF2QixFQUE4QjtBQUMxQmxCLElBQUFBLFlBQVksR0FBRyxJQUFJQyxJQUFKLEVBQWY7O0FBQ0EsU0FBSyxJQUFJa0IsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2pCLFNBQVMsQ0FBQ2tCLE1BQTlCLEVBQXNDRCxDQUFDLEVBQXZDLEVBQTJDO0FBQ3ZDakIsTUFBQUEsU0FBUyxDQUFDaUIsQ0FBRCxDQUFULENBQWFELEtBQWI7QUFDSDs7QUFDRHRCLElBQUFBLGNBQWMsQ0FBQ3lCLE9BQWYsQ0FBdUIsVUFBQ0MsRUFBRCxFQUFRO0FBQzNCLFVBQUksQ0FBQ0EsRUFBRSxDQUFDQyxVQUFKLElBQWtCTCxLQUFLLENBQUNNLElBQU4sQ0FBV0MsT0FBWCxDQUFtQixRQUFuQixNQUFpQyxDQUFDLENBQXhELEVBQ0k7QUFDSkgsTUFBQUEsRUFBRSxDQUFDSixLQUFELENBQUY7QUFDSCxLQUpEO0FBS0g7O0FBQ0QsV0FBU1gsZ0JBQVQsR0FBNEI7QUFDeEJtQixJQUFBQSxhQUFhLENBQUNyQixLQUFELENBQWI7QUFDQU4sSUFBQUEsTUFBTSxDQUFDNEIsS0FBUDtBQUNBQyxJQUFBQSxVQUFVLENBQUN4QixJQUFELEVBQU9OLE9BQU8sQ0FBQ0ssT0FBZixDQUFWO0FBQ0g7O0FBQ0QsU0FBTztBQUNId0IsSUFBQUEsS0FBSyxFQUFFLGlCQUFNO0FBQ1RELE1BQUFBLGFBQWEsQ0FBQ3JCLEtBQUQsQ0FBYjtBQUNBTixNQUFBQSxNQUFNLENBQUM0QixLQUFQO0FBQ0gsS0FKRTtBQUtIRSxJQUFBQSxrQkFBa0IsRUFBRSw0QkFBVUMsRUFBVixFQUFjO0FBQzlCNUIsTUFBQUEsU0FBUyxDQUFDNkIsSUFBVixDQUFlRCxFQUFmO0FBQ0g7QUFQRSxHQUFQO0FBU0g7O0tBakRRakM7O0FBa0RULFNBQVNGLHFCQUFULENBQStCRyxPQUEvQixFQUF3QztBQUNwQyxNQUFJLENBQUNBLE9BQU8sQ0FBQ2tDLFFBQWIsRUFBdUI7QUFDbkIsV0FBTztBQUNISCxNQUFBQSxrQkFBa0IsRUFBRSw0QkFBQ1AsRUFBRCxFQUFRO0FBQ3hCMUIsUUFBQUEsY0FBYyxDQUFDbUMsSUFBZixDQUFvQlQsRUFBcEI7QUFDSDtBQUhFLEtBQVA7QUFLSDs7QUFDRCxTQUFPekIsa0JBQWtCLENBQUNDLE9BQUQsQ0FBekI7QUFDSDs7QUFDREwsNkJBQUEsR0FBZ0NFLHFCQUFoQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9qb3kvZGlzdC9jbGllbnQvZGV2L2Vycm9yLW92ZXJsYXkvZXZlbnRzb3VyY2UuanM/YWNiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0RXZlbnRTb3VyY2VXcmFwcGVyID0gdm9pZCAwO1xuY29uc3QgZXZlbnRDYWxsYmFja3MgPSBbXTtcbmZ1bmN0aW9uIEV2ZW50U291cmNlV3JhcHBlcihvcHRpb25zKSB7XG4gICAgdmFyIHNvdXJjZTtcbiAgICB2YXIgbGFzdEFjdGl2aXR5ID0gbmV3IERhdGUoKTtcbiAgICB2YXIgbGlzdGVuZXJzID0gW107XG4gICAgaWYgKCFvcHRpb25zLnRpbWVvdXQpIHtcbiAgICAgICAgb3B0aW9ucy50aW1lb3V0ID0gMjAgKiAxMDAwO1xuICAgIH1cbiAgICBpbml0KCk7XG4gICAgdmFyIHRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAobmV3IERhdGUoKSAtIGxhc3RBY3Rpdml0eSA+IG9wdGlvbnMudGltZW91dCkge1xuICAgICAgICAgICAgaGFuZGxlRGlzY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgfSwgb3B0aW9ucy50aW1lb3V0IC8gMik7XG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgc291cmNlID0gbmV3IHdpbmRvdy5FdmVudFNvdXJjZShvcHRpb25zLnBhdGgpO1xuICAgICAgICBzb3VyY2Uub25vcGVuID0gaGFuZGxlT25saW5lO1xuICAgICAgICBzb3VyY2Uub25lcnJvciA9IGhhbmRsZURpc2Nvbm5lY3Q7XG4gICAgICAgIHNvdXJjZS5vbm1lc3NhZ2UgPSBoYW5kbGVNZXNzYWdlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVPbmxpbmUoKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmxvZylcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0hNUl0gY29ubmVjdGVkXCIpO1xuICAgICAgICBsYXN0QWN0aXZpdHkgPSBuZXcgRGF0ZSgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVNZXNzYWdlKGV2ZW50KSB7XG4gICAgICAgIGxhc3RBY3Rpdml0eSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcnNbaV0oZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50Q2FsbGJhY2tzLmZvckVhY2goKGNiKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWNiLnVuZmlsdGVyZWQgJiYgZXZlbnQuZGF0YS5pbmRleE9mKFwiYWN0aW9uXCIpID09PSAtMSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYihldmVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVEaXNjb25uZWN0KCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAgICAgICAgc291cmNlLmNsb3NlKCk7XG4gICAgICAgIHNldFRpbWVvdXQoaW5pdCwgb3B0aW9ucy50aW1lb3V0KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2xvc2U6ICgpID0+IHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICAgICAgICAgICAgc291cmNlLmNsb3NlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGFkZE1lc3NhZ2VMaXN0ZW5lcjogZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcnMucHVzaChmbik7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldEV2ZW50U291cmNlV3JhcHBlcihvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zLm9uZGVtYW5kKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhZGRNZXNzYWdlTGlzdGVuZXI6IChjYikgPT4ge1xuICAgICAgICAgICAgICAgIGV2ZW50Q2FsbGJhY2tzLnB1c2goY2IpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIEV2ZW50U291cmNlV3JhcHBlcihvcHRpb25zKTtcbn1cbmV4cG9ydHMuZ2V0RXZlbnRTb3VyY2VXcmFwcGVyID0gZ2V0RXZlbnRTb3VyY2VXcmFwcGVyO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0RXZlbnRTb3VyY2VXcmFwcGVyIiwiZXZlbnRDYWxsYmFja3MiLCJFdmVudFNvdXJjZVdyYXBwZXIiLCJvcHRpb25zIiwic291cmNlIiwibGFzdEFjdGl2aXR5IiwiRGF0ZSIsImxpc3RlbmVycyIsInRpbWVvdXQiLCJpbml0IiwidGltZXIiLCJzZXRJbnRlcnZhbCIsImhhbmRsZURpc2Nvbm5lY3QiLCJ3aW5kb3ciLCJFdmVudFNvdXJjZSIsInBhdGgiLCJvbm9wZW4iLCJoYW5kbGVPbmxpbmUiLCJvbmVycm9yIiwib25tZXNzYWdlIiwiaGFuZGxlTWVzc2FnZSIsImxvZyIsImNvbnNvbGUiLCJldmVudCIsImkiLCJsZW5ndGgiLCJmb3JFYWNoIiwiY2IiLCJ1bmZpbHRlcmVkIiwiZGF0YSIsImluZGV4T2YiLCJjbGVhckludGVydmFsIiwiY2xvc2UiLCJzZXRUaW1lb3V0IiwiYWRkTWVzc2FnZUxpc3RlbmVyIiwiZm4iLCJwdXNoIiwib25kZW1hbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../joy/dist/client/dev/error-overlay/eventsource.js\n");

/***/ }),

/***/ "../joy/dist/client/dev/event-source-polyfill.js":
/*!*******************************************************!*\
  !*** ../joy/dist/client/dev/event-source-polyfill.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/* eslint-disable */\n// Improved version of https://github.com/Yaffle/EventSource/\n// Available under MIT License (MIT)\n// Only tries to support IE11 and nothing below\n\nvar fetch_1 = __importDefault(__webpack_require__(/*! ../..//build/polyfills/fetch */ \"../joy/dist/build/polyfills/fetch/index.js\"));\n\nvar document = window.document;\nvar Response = window.Response;\nvar TextDecoder = window.TextDecoder;\nvar TextEncoder = window.TextEncoder;\nvar AbortController = window.AbortController;\n\nif (AbortController == undefined) {\n  AbortController = function AbortController() {\n    this.signal = null;\n\n    this.abort = function () {};\n  };\n}\n\nfunction TextDecoderPolyfill() {\n  this.bitsNeeded = 0;\n  this.codePoint = 0;\n}\n\n_c = TextDecoderPolyfill;\n\nTextDecoderPolyfill.prototype.decode = function (octets) {\n  function valid(codePoint, shift, octetsCount) {\n    if (octetsCount === 1) {\n      return codePoint >= 0x0080 >> shift && codePoint << shift <= 0x07ff;\n    }\n\n    if (octetsCount === 2) {\n      return codePoint >= 0x0800 >> shift && codePoint << shift <= 0xd7ff || codePoint >= 0xe000 >> shift && codePoint << shift <= 0xffff;\n    }\n\n    if (octetsCount === 3) {\n      return codePoint >= 0x010000 >> shift && codePoint << shift <= 0x10ffff;\n    }\n\n    throw new Error();\n  }\n\n  function octetsCount(bitsNeeded, codePoint) {\n    if (bitsNeeded === 6 * 1) {\n      return codePoint >> 6 > 15 ? 3 : codePoint > 31 ? 2 : 1;\n    }\n\n    if (bitsNeeded === 6 * 2) {\n      return codePoint > 15 ? 3 : 2;\n    }\n\n    if (bitsNeeded === 6 * 3) {\n      return 3;\n    }\n\n    throw new Error();\n  }\n\n  var REPLACER = 0xfffd;\n  var string = \"\";\n  var bitsNeeded = this.bitsNeeded;\n  var codePoint = this.codePoint;\n\n  for (var i = 0; i < octets.length; i += 1) {\n    var octet = octets[i];\n\n    if (bitsNeeded !== 0) {\n      if (octet < 128 || octet > 191 || !valid(codePoint << 6 | octet & 63, bitsNeeded - 6, octetsCount(bitsNeeded, codePoint))) {\n        bitsNeeded = 0;\n        codePoint = REPLACER;\n        string += String.fromCharCode(codePoint);\n      }\n    }\n\n    if (bitsNeeded === 0) {\n      if (octet >= 0 && octet <= 127) {\n        bitsNeeded = 0;\n        codePoint = octet;\n      } else if (octet >= 192 && octet <= 223) {\n        bitsNeeded = 6 * 1;\n        codePoint = octet & 31;\n      } else if (octet >= 224 && octet <= 239) {\n        bitsNeeded = 6 * 2;\n        codePoint = octet & 15;\n      } else if (octet >= 240 && octet <= 247) {\n        bitsNeeded = 6 * 3;\n        codePoint = octet & 7;\n      } else {\n        bitsNeeded = 0;\n        codePoint = REPLACER;\n      }\n\n      if (bitsNeeded !== 0 && !valid(codePoint, bitsNeeded, octetsCount(bitsNeeded, codePoint))) {\n        bitsNeeded = 0;\n        codePoint = REPLACER;\n      }\n    } else {\n      bitsNeeded -= 6;\n      codePoint = codePoint << 6 | octet & 63;\n    }\n\n    if (bitsNeeded === 0) {\n      if (codePoint <= 0xffff) {\n        string += String.fromCharCode(codePoint);\n      } else {\n        string += String.fromCharCode(0xd800 + (codePoint - 0xffff - 1 >> 10));\n        string += String.fromCharCode(0xdc00 + (codePoint - 0xffff - 1 & 0x3ff));\n      }\n    }\n  }\n\n  this.bitsNeeded = bitsNeeded;\n  this.codePoint = codePoint;\n  return string;\n}; // Firefox < 38 throws an error with stream option\n\n\nvar supportsStreamOption = function supportsStreamOption() {\n  try {\n    return new TextDecoder().decode(new TextEncoder().encode(\"test\"), {\n      stream: true\n    }) === \"test\";\n  } catch (error) {\n    console.log(error);\n  }\n\n  return false;\n}; // IE, Edge\n\n\nif (TextDecoder == undefined || TextEncoder == undefined || !supportsStreamOption()) {\n  TextDecoder = TextDecoderPolyfill;\n}\n\nvar k = function k() {};\n\nfunction XHRWrapper(xhr) {\n  this.withCredentials = false;\n  this.responseType = \"\";\n  this.readyState = 0;\n  this.status = 0;\n  this.statusText = \"\";\n  this.responseText = \"\";\n  this.onprogress = k;\n  this.onreadystatechange = k;\n  this._contentType = \"\";\n  this._xhr = xhr;\n  this._sendTimeout = 0;\n  this._abort = k;\n}\n\n_c2 = XHRWrapper;\n\nXHRWrapper.prototype.open = function (method, url) {\n  this._abort(true);\n\n  var that = this;\n  var xhr = this._xhr;\n  var state = 1;\n  var timeout = 0;\n\n  this._abort = function (silent) {\n    if (that._sendTimeout !== 0) {\n      clearTimeout(that._sendTimeout);\n      that._sendTimeout = 0;\n    }\n\n    if (state === 1 || state === 2 || state === 3) {\n      state = 4;\n      xhr.onload = k;\n      xhr.onerror = k;\n      xhr.onabort = k;\n      xhr.onprogress = k;\n      xhr.onreadystatechange = k; // IE 8 - 9: XDomainRequest#abort() does not fire any event\n      // Opera < 10: XMLHttpRequest#abort() does not fire any event\n\n      xhr.abort();\n\n      if (timeout !== 0) {\n        clearTimeout(timeout);\n        timeout = 0;\n      }\n\n      if (!silent) {\n        that.readyState = 4;\n        that.onreadystatechange();\n      }\n    }\n\n    state = 0;\n  };\n\n  var onStart = function onStart() {\n    if (state === 1) {\n      // state = 2;\n      var status = 0;\n      var statusText = \"\";\n      var contentType = undefined;\n\n      if (!(\"contentType\" in xhr)) {\n        try {\n          status = xhr.status;\n          statusText = xhr.statusText;\n          contentType = xhr.getResponseHeader(\"Content-Type\");\n        } catch (error) {\n          // IE < 10 throws exception for `xhr.status` when xhr.readyState === 2 || xhr.readyState === 3\n          // Opera < 11 throws exception for `xhr.status` when xhr.readyState === 2\n          // https://bugs.webkit.org/show_bug.cgi?id=29121\n          status = 0;\n          statusText = \"\";\n          contentType = undefined; // Firefox < 14, Chrome ?, Safari ?\n          // https://bugs.webkit.org/show_bug.cgi?id=29658\n          // https://bugs.webkit.org/show_bug.cgi?id=77854\n        }\n      } else {\n        status = 200;\n        statusText = \"OK\";\n        contentType = xhr.contentType;\n      }\n\n      if (status !== 0) {\n        state = 2;\n        that.readyState = 2;\n        that.status = status;\n        that.statusText = statusText;\n        that._contentType = contentType;\n        that.onreadystatechange();\n      }\n    }\n  };\n\n  var onProgress = function onProgress() {\n    onStart();\n\n    if (state === 2 || state === 3) {\n      state = 3;\n      var responseText = \"\";\n\n      try {\n        responseText = xhr.responseText;\n      } catch (error) {// IE 8 - 9 with XMLHttpRequest\n      }\n\n      that.readyState = 3;\n      that.responseText = responseText;\n      that.onprogress();\n    }\n  };\n\n  var onFinish = function onFinish() {\n    // Firefox 52 fires \"readystatechange\" (xhr.readyState === 4) without final \"readystatechange\" (xhr.readyState === 3)\n    // IE 8 fires \"onload\" without \"onprogress\"\n    onProgress();\n\n    if (state === 1 || state === 2 || state === 3) {\n      state = 4;\n\n      if (timeout !== 0) {\n        clearTimeout(timeout);\n        timeout = 0;\n      }\n\n      that.readyState = 4;\n      that.onreadystatechange();\n    }\n  };\n\n  var onReadyStateChange = function onReadyStateChange() {\n    if (xhr != undefined) {\n      // Opera 12\n      if (xhr.readyState === 4) {\n        onFinish();\n      } else if (xhr.readyState === 3) {\n        onProgress();\n      } else if (xhr.readyState === 2) {\n        onStart();\n      }\n    }\n  };\n\n  var onTimeout = function onTimeout() {\n    timeout = setTimeout(function () {\n      onTimeout();\n    }, 500);\n\n    if (xhr.readyState === 3) {\n      onProgress();\n    }\n  }; // XDomainRequest#abort removes onprogress, onerror, onload\n\n\n  xhr.onload = onFinish;\n  xhr.onerror = onFinish; // improper fix to match Firefox behavior, but it is better than just ignore abort\n  // see https://bugzilla.mozilla.org/show_bug.cgi?id=768596\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=880200\n  // https://code.google.com/p/chromium/issues/detail?id=153570\n  // IE 8 fires \"onload\" without \"onprogress\n\n  xhr.onabort = onFinish; // https://bugzilla.mozilla.org/show_bug.cgi?id=736723\n\n  if (!(\"sendAsBinary\" in XMLHttpRequest.prototype) && !(\"mozAnon\" in XMLHttpRequest.prototype)) {\n    xhr.onprogress = onProgress;\n  } // IE 8 - 9 (XMLHTTPRequest)\n  // Opera < 12\n  // Firefox < 3.5\n  // Firefox 3.5 - 3.6 - ? < 9.0\n  // onprogress is not fired sometimes or delayed\n  // see also #64\n\n\n  xhr.onreadystatechange = onReadyStateChange;\n\n  if (\"contentType\" in xhr) {\n    url += (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + \"padding=true\";\n  }\n\n  xhr.open(method, url, true);\n\n  if (\"readyState\" in xhr) {\n    // workaround for Opera 12 issue with \"progress\" events\n    // #91\n    timeout = setTimeout(function () {\n      onTimeout();\n    }, 0);\n  }\n};\n\nXHRWrapper.prototype.abort = function () {\n  this._abort(false);\n};\n\nXHRWrapper.prototype.getResponseHeader = function (name) {\n  return this._contentType;\n};\n\nXHRWrapper.prototype.setRequestHeader = function (name, value) {\n  var xhr = this._xhr;\n\n  if (\"setRequestHeader\" in xhr) {\n    xhr.setRequestHeader(name, value);\n  }\n};\n\nXHRWrapper.prototype.getAllResponseHeaders = function () {\n  return this._xhr.getAllResponseHeaders != undefined ? this._xhr.getAllResponseHeaders() : \"\";\n};\n\nXHRWrapper.prototype.send = function () {\n  // loading indicator in Safari < ? (6), Chrome < 14, Firefox\n  if (!(\"ontimeout\" in XMLHttpRequest.prototype) && document != undefined && document.readyState != undefined && document.readyState !== \"complete\") {\n    var that = this;\n    that._sendTimeout = setTimeout(function () {\n      that._sendTimeout = 0;\n      that.send();\n    }, 4);\n    return;\n  }\n\n  var xhr = this._xhr; // withCredentials should be set after \"open\" for Safari and Chrome (< 19 ?)\n\n  xhr.withCredentials = this.withCredentials;\n  xhr.responseType = this.responseType;\n\n  try {\n    // xhr.send(); throws \"Not enough arguments\" in Firefox 3.0\n    xhr.send(undefined);\n  } catch (error1) {\n    // Safari 5.1.7, Opera 12\n    throw error1;\n  }\n};\n\nfunction toLowerCase(name) {\n  return name.replace(/[A-Z]/g, function (c) {\n    return String.fromCharCode(c.charCodeAt(0) + 0x20);\n  });\n}\n\nfunction HeadersPolyfill(all) {\n  // Get headers: implemented according to mozilla's example code: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders#Example\n  var map = Object.create(null);\n  var array = all.split(\"\\r\\n\");\n\n  for (var i = 0; i < array.length; i += 1) {\n    var line = array[i];\n    var parts = line.split(\": \");\n    var name = parts.shift();\n    var value = parts.join(\": \");\n    map[toLowerCase(name)] = value;\n  }\n\n  this._map = map;\n}\n\n_c3 = HeadersPolyfill;\n\nHeadersPolyfill.prototype.get = function (name) {\n  return this._map[toLowerCase(name)];\n};\n\nfunction XHRTransport() {}\n\n_c4 = XHRTransport;\n\nXHRTransport.prototype.open = function (xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {\n  xhr.open(\"GET\", url);\n  var offset = 0;\n\n  xhr.onprogress = function () {\n    var responseText = xhr.responseText;\n    var chunk = responseText.slice(offset);\n    offset += chunk.length;\n    onProgressCallback(chunk);\n  };\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 2) {\n      var status = xhr.status;\n      var statusText = xhr.statusText;\n      var contentType = xhr.getResponseHeader(\"Content-Type\");\n      var headers = xhr.getAllResponseHeaders();\n      onStartCallback(status, statusText, contentType, new HeadersPolyfill(headers), function () {\n        xhr.abort();\n      });\n    } else if (xhr.readyState === 4) {\n      onFinishCallback();\n    }\n  };\n\n  xhr.withCredentials = withCredentials;\n  xhr.responseType = \"text\";\n\n  for (var name in headers) {\n    if (Object.prototype.hasOwnProperty.call(headers, name)) {\n      xhr.setRequestHeader(name, headers[name]);\n    }\n  }\n\n  xhr.send();\n};\n\nfunction HeadersWrapper(headers) {\n  this._headers = headers;\n}\n\n_c5 = HeadersWrapper;\n\nHeadersWrapper.prototype.get = function (name) {\n  return this._headers.get(name);\n};\n\nfunction FetchTransport() {}\n\n_c6 = FetchTransport;\n\nFetchTransport.prototype.open = function (xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {\n  var controller = new AbortController();\n  var signal = controller.signal; // see #120\n\n  var textDecoder = new TextDecoder();\n  (0, fetch_1[\"default\"])(url, {\n    headers: headers,\n    credentials: withCredentials ? \"include\" : \"same-origin\",\n    signal: signal,\n    cache: \"no-store\"\n  }).then(function (response) {\n    var reader = response.body.getReader();\n    onStartCallback(response.status, response.statusText, response.headers.get(\"Content-Type\"), new HeadersWrapper(response.headers), function () {\n      controller.abort();\n      reader.cancel();\n    });\n    return new Promise(function (resolve, reject) {\n      var readNextChunk = function readNextChunk() {\n        reader.read().then(function (result) {\n          if (result.done) {\n            // Note: bytes in textDecoder are ignored\n            resolve(undefined);\n          } else {\n            var chunk = textDecoder.decode(result.value, {\n              stream: true\n            });\n            onProgressCallback(chunk);\n            readNextChunk();\n          }\n        })[\"catch\"](function (error) {\n          reject(error);\n        });\n      };\n\n      readNextChunk();\n    });\n  }).then(function (result) {\n    onFinishCallback();\n    return result;\n  }, function (error) {\n    onFinishCallback();\n    return Promise.reject(error);\n  });\n};\n\nfunction EventTarget() {\n  this._listeners = Object.create(null);\n}\n\n_c7 = EventTarget;\n\nfunction throwError(e) {\n  setTimeout(function () {\n    throw e;\n  }, 0);\n}\n\nEventTarget.prototype.dispatchEvent = function (event) {\n  event.target = this;\n  var typeListeners = this._listeners[event.type];\n\n  if (typeListeners != undefined) {\n    var length = typeListeners.length;\n\n    for (var i = 0; i < length; i += 1) {\n      var listener = typeListeners[i];\n\n      try {\n        if (typeof listener.handleEvent === \"function\") {\n          listener.handleEvent(event);\n        } else {\n          listener.call(this, event);\n        }\n      } catch (e) {\n        throwError(e);\n      }\n    }\n  }\n};\n\nEventTarget.prototype.addEventListener = function (type, listener) {\n  type = String(type);\n  var listeners = this._listeners;\n  var typeListeners = listeners[type];\n\n  if (typeListeners == undefined) {\n    typeListeners = [];\n    listeners[type] = typeListeners;\n  }\n\n  var found = false;\n\n  for (var i = 0; i < typeListeners.length; i += 1) {\n    if (typeListeners[i] === listener) {\n      found = true;\n    }\n  }\n\n  if (!found) {\n    typeListeners.push(listener);\n  }\n};\n\nEventTarget.prototype.removeEventListener = function (type, listener) {\n  type = String(type);\n  var listeners = this._listeners;\n  var typeListeners = listeners[type];\n\n  if (typeListeners != undefined) {\n    var filtered = [];\n\n    for (var i = 0; i < typeListeners.length; i += 1) {\n      if (typeListeners[i] !== listener) {\n        filtered.push(typeListeners[i]);\n      }\n    }\n\n    if (filtered.length === 0) {\n      delete listeners[type];\n    } else {\n      listeners[type] = filtered;\n    }\n  }\n};\n\nfunction Event(type) {\n  this.type = type;\n  this.target = undefined;\n}\n\n_c8 = Event;\n\nfunction MessageEvent(type, options) {\n  Event.call(this, type);\n  this.data = options.data;\n  this.lastEventId = options.lastEventId;\n}\n\n_c9 = MessageEvent;\nMessageEvent.prototype = Object.create(Event.prototype);\n\nfunction ConnectionEvent(type, options) {\n  Event.call(this, type);\n  this.status = options.status;\n  this.statusText = options.statusText;\n  this.headers = options.headers;\n}\n\n_c10 = ConnectionEvent;\nConnectionEvent.prototype = Object.create(Event.prototype);\nvar WAITING = -1;\nvar CONNECTING = 0;\nvar OPEN = 1;\nvar CLOSED = 2;\nvar AFTER_CR = -1;\nvar FIELD_START = 0;\nvar FIELD = 1;\nvar VALUE_START = 2;\nvar VALUE = 3;\nvar contentTypeRegExp = /^text\\/event\\-stream;?(\\s*charset\\=utf\\-8)?$/i;\nvar MINIMUM_DURATION = 1000;\nvar MAXIMUM_DURATION = 18000000;\n\nvar parseDuration = function parseDuration(value, def) {\n  var n = parseInt(value, 10);\n\n  if (n !== n) {\n    n = def;\n  }\n\n  return clampDuration(n);\n};\n\nvar clampDuration = function clampDuration(n) {\n  return Math.min(Math.max(n, MINIMUM_DURATION), MAXIMUM_DURATION);\n};\n\nvar fire = function fire(that, f, event) {\n  try {\n    if (typeof f === \"function\") {\n      f.call(that, event);\n    }\n  } catch (e) {\n    throwError(e);\n  }\n};\n\nfunction EventSourcePolyfill(url, options) {\n  EventTarget.call(this);\n  this.onopen = undefined;\n  this.onmessage = undefined;\n  this.onerror = undefined;\n  this.url = undefined;\n  this.readyState = undefined;\n  this.withCredentials = undefined;\n  this._close = undefined;\n  start(this, url, options);\n}\n\n_c11 = EventSourcePolyfill;\nvar isFetchSupported = fetch_1[\"default\"] != undefined && Response != undefined && \"body\" in Response.prototype;\n\nfunction start(es, url, options) {\n  url = String(url);\n  var withCredentials = options != undefined && Boolean(options.withCredentials);\n  var initialRetry = clampDuration(1000);\n  var heartbeatTimeout = options != undefined && options.heartbeatTimeout != undefined ? parseDuration(options.heartbeatTimeout, 45000) : clampDuration(45000);\n  var lastEventId = \"\";\n  var retry = initialRetry;\n  var wasActivity = false;\n  var headers = options != undefined && options.headers != undefined ? JSON.parse(JSON.stringify(options.headers)) : undefined;\n  var CurrentTransport = options != undefined && options.Transport != undefined ? options.Transport : XMLHttpRequest;\n  var xhr = isFetchSupported && !(options != undefined && options.Transport != undefined) ? undefined : new XHRWrapper(new CurrentTransport());\n  var transport = xhr == undefined ? new FetchTransport() : new XHRTransport();\n  var cancelFunction = undefined;\n  var timeout = 0;\n  var currentState = WAITING;\n  var dataBuffer = \"\";\n  var lastEventIdBuffer = \"\";\n  var eventTypeBuffer = \"\";\n  var textBuffer = \"\";\n  var state = FIELD_START;\n  var fieldStart = 0;\n  var valueStart = 0;\n\n  var onStart = function onStart(status, statusText, contentType, headers, cancel) {\n    if (currentState === CONNECTING) {\n      cancelFunction = cancel;\n\n      if (status === 200 && contentType != undefined && contentTypeRegExp.test(contentType)) {\n        currentState = OPEN;\n        wasActivity = true;\n        retry = initialRetry;\n        es.readyState = OPEN;\n        var event = new ConnectionEvent(\"open\", {\n          status: status,\n          statusText: statusText,\n          headers: headers\n        });\n        es.dispatchEvent(event);\n        fire(es, es.onopen, event);\n      } else {\n        var message = \"\";\n\n        if (status !== 200) {\n          if (statusText) {\n            statusText = statusText.replace(/\\s+/g, \" \");\n          }\n\n          message = \"EventSource's response has a status \" + status + \" \" + statusText + \" that is not 200. Aborting the connection.\";\n        } else {\n          message = \"EventSource's response has a Content-Type specifying an unsupported type: \" + (contentType == undefined ? \"-\" : contentType.replace(/\\s+/g, \" \")) + \". Aborting the connection.\";\n        }\n\n        throwError(new Error(message));\n        close();\n        var event = new ConnectionEvent(\"error\", {\n          status: status,\n          statusText: statusText,\n          headers: headers\n        });\n        es.dispatchEvent(event);\n        fire(es, es.onerror, event);\n      }\n    }\n  };\n\n  var onProgress = function onProgress(textChunk) {\n    if (currentState === OPEN) {\n      var n = -1;\n\n      for (var i = 0; i < textChunk.length; i += 1) {\n        var c = textChunk.charCodeAt(i);\n\n        if (c === \"\\n\".charCodeAt(0) || c === \"\\r\".charCodeAt(0)) {\n          n = i;\n        }\n      }\n\n      var chunk = (n !== -1 ? textBuffer : \"\") + textChunk.slice(0, n + 1);\n      textBuffer = (n === -1 ? textBuffer : \"\") + textChunk.slice(n + 1);\n\n      if (chunk !== \"\") {\n        wasActivity = true;\n      }\n\n      for (var position = 0; position < chunk.length; position += 1) {\n        var c = chunk.charCodeAt(position);\n\n        if (state === AFTER_CR && c === \"\\n\".charCodeAt(0)) {\n          state = FIELD_START;\n        } else {\n          if (state === AFTER_CR) {\n            state = FIELD_START;\n          }\n\n          if (c === \"\\r\".charCodeAt(0) || c === \"\\n\".charCodeAt(0)) {\n            if (state !== FIELD_START) {\n              if (state === FIELD) {\n                valueStart = position + 1;\n              }\n\n              var field = chunk.slice(fieldStart, valueStart - 1);\n              var value = chunk.slice(valueStart + (valueStart < position && chunk.charCodeAt(valueStart) === \" \".charCodeAt(0) ? 1 : 0), position);\n\n              if (field === \"data\") {\n                dataBuffer += \"\\n\";\n                dataBuffer += value;\n              } else if (field === \"id\") {\n                lastEventIdBuffer = value;\n              } else if (field === \"event\") {\n                eventTypeBuffer = value;\n              } else if (field === \"retry\") {\n                initialRetry = parseDuration(value, initialRetry);\n                retry = initialRetry;\n              } else if (field === \"heartbeatTimeout\") {\n                heartbeatTimeout = parseDuration(value, heartbeatTimeout);\n\n                if (timeout !== 0) {\n                  clearTimeout(timeout);\n                  timeout = setTimeout(function () {\n                    onTimeout();\n                  }, heartbeatTimeout);\n                }\n              }\n            }\n\n            if (state === FIELD_START) {\n              if (dataBuffer !== \"\") {\n                lastEventId = lastEventIdBuffer;\n\n                if (eventTypeBuffer === \"\") {\n                  eventTypeBuffer = \"message\";\n                }\n\n                var event = new MessageEvent(eventTypeBuffer, {\n                  data: dataBuffer.slice(1),\n                  lastEventId: lastEventIdBuffer\n                });\n                es.dispatchEvent(event);\n\n                if (eventTypeBuffer === \"message\") {\n                  fire(es, es.onmessage, event);\n                }\n\n                if (currentState === CLOSED) {\n                  return;\n                }\n              }\n\n              dataBuffer = \"\";\n              eventTypeBuffer = \"\";\n            }\n\n            state = c === \"\\r\".charCodeAt(0) ? AFTER_CR : FIELD_START;\n          } else {\n            if (state === FIELD_START) {\n              fieldStart = position;\n              state = FIELD;\n            }\n\n            if (state === FIELD) {\n              if (c === \":\".charCodeAt(0)) {\n                valueStart = position + 1;\n                state = VALUE_START;\n              }\n            } else if (state === VALUE_START) {\n              state = VALUE;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  var onFinish = function onFinish() {\n    if (currentState === OPEN || currentState === CONNECTING) {\n      currentState = WAITING;\n\n      if (timeout !== 0) {\n        clearTimeout(timeout);\n        timeout = 0;\n      }\n\n      timeout = setTimeout(function () {\n        onTimeout();\n      }, retry);\n      retry = clampDuration(Math.min(initialRetry * 16, retry * 2));\n      es.readyState = CONNECTING;\n      var event = new Event(\"error\");\n      es.dispatchEvent(event);\n      fire(es, es.onerror, event);\n    }\n  };\n\n  var close = function close() {\n    currentState = CLOSED;\n\n    if (cancelFunction != undefined) {\n      cancelFunction();\n      cancelFunction = undefined;\n    }\n\n    if (timeout !== 0) {\n      clearTimeout(timeout);\n      timeout = 0;\n    }\n\n    es.readyState = CLOSED;\n  };\n\n  var onTimeout = function onTimeout() {\n    timeout = 0;\n\n    if (currentState !== WAITING) {\n      if (!wasActivity && cancelFunction != undefined) {\n        throwError(new Error(\"No activity within \" + heartbeatTimeout + \" milliseconds. Reconnecting.\"));\n        cancelFunction();\n        cancelFunction = undefined;\n      } else {\n        wasActivity = false;\n        timeout = setTimeout(function () {\n          onTimeout();\n        }, heartbeatTimeout);\n      }\n\n      return;\n    }\n\n    wasActivity = false;\n    timeout = setTimeout(function () {\n      onTimeout();\n    }, heartbeatTimeout);\n    currentState = CONNECTING;\n    dataBuffer = \"\";\n    eventTypeBuffer = \"\";\n    lastEventIdBuffer = lastEventId;\n    textBuffer = \"\";\n    fieldStart = 0;\n    valueStart = 0;\n    state = FIELD_START; // https://bugzilla.mozilla.org/show_bug.cgi?id=428916\n    // Request header field Last-Event-ID is not allowed by Access-Control-Allow-Headers.\n\n    var requestURL = url;\n\n    if (url.slice(0, 5) !== \"data:\" && url.slice(0, 5) !== \"blob:\") {\n      if (lastEventId !== \"\") {\n        requestURL += (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + \"lastEventId=\" + encodeURIComponent(lastEventId);\n      }\n    }\n\n    var requestHeaders = {};\n    requestHeaders[\"Accept\"] = \"text/event-stream\";\n\n    if (headers != undefined) {\n      for (var name in headers) {\n        if (Object.prototype.hasOwnProperty.call(headers, name)) {\n          requestHeaders[name] = headers[name];\n        }\n      }\n    }\n\n    try {\n      transport.open(xhr, onStart, onProgress, onFinish, requestURL, withCredentials, requestHeaders);\n    } catch (error) {\n      close();\n      throw error;\n    }\n  };\n\n  es.url = url;\n  es.readyState = CONNECTING;\n  es.withCredentials = withCredentials;\n  es._close = close;\n  onTimeout();\n}\n\nEventSourcePolyfill.prototype = Object.create(EventTarget.prototype);\nEventSourcePolyfill.prototype.CONNECTING = CONNECTING;\nEventSourcePolyfill.prototype.OPEN = OPEN;\nEventSourcePolyfill.prototype.CLOSED = CLOSED;\n\nEventSourcePolyfill.prototype.close = function () {\n  this._close();\n};\n\nEventSourcePolyfill.CONNECTING = CONNECTING;\nEventSourcePolyfill.OPEN = OPEN;\nEventSourcePolyfill.CLOSED = CLOSED;\nEventSourcePolyfill.prototype.withCredentials = undefined;\nexports[\"default\"] = EventSourcePolyfill;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n\n$RefreshReg$(_c, \"TextDecoderPolyfill\");\n$RefreshReg$(_c2, \"XHRWrapper\");\n$RefreshReg$(_c3, \"HeadersPolyfill\");\n$RefreshReg$(_c4, \"XHRTransport\");\n$RefreshReg$(_c5, \"HeadersWrapper\");\n$RefreshReg$(_c6, \"FetchTransport\");\n$RefreshReg$(_c7, \"EventTarget\");\n$RefreshReg$(_c8, \"Event\");\n$RefreshReg$(_c9, \"MessageEvent\");\n$RefreshReg$(_c10, \"ConnectionEvent\");\n$RefreshReg$(_c11, \"EventSourcePolyfill\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../joy/dist/client/dev/event-source-polyfill.js\n");

/***/ }),

/***/ "../joy/dist/client/dev/fouc.js":
/*!**************************************!*\
  !*** ../joy/dist/client/dev/fouc.js ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.displayContent = void 0; // This function is used to remove Joy.js' no-FOUC styles workaround for using\n// `style-loader` in development. It must be called before hydration, or else\n// rendering won't have the correct computed values in effects.\n\nfunction displayContent(callback) {\n  (window.requestAnimationFrame || setTimeout)(function () {\n    for (var x = document.querySelectorAll(\"[data-joy-hide-fouc]\"), i = x.length; i--;) {\n      x[i].parentNode.removeChild(x[i]);\n    }\n\n    if (callback) {\n      callback();\n    }\n  });\n}\n\nexports.displayContent = displayContent;\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vam95L2Rpc3QvY2xpZW50L2Rldi9mb3VjLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTs7QUFDYkEsOENBQTZDO0FBQUVHLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDO0FBQ0FELHNCQUFBLEdBQXlCLEtBQUssQ0FBOUIsRUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBU0UsY0FBVCxDQUF3QkMsUUFBeEIsRUFBa0M7QUFDOUIsR0FBQ0MsTUFBTSxDQUFDQyxxQkFBUCxJQUFnQ0MsVUFBakMsRUFBNkMsWUFBWTtBQUNyRCxTQUFLLElBQUlDLENBQUMsR0FBR0MsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixzQkFBMUIsQ0FBUixFQUEyREMsQ0FBQyxHQUFHSCxDQUFDLENBQUNJLE1BQXRFLEVBQThFRCxDQUFDLEVBQS9FLEdBQW9GO0FBQ2hGSCxNQUFBQSxDQUFDLENBQUNHLENBQUQsQ0FBRCxDQUFLRSxVQUFMLENBQWdCQyxXQUFoQixDQUE0Qk4sQ0FBQyxDQUFDRyxDQUFELENBQTdCO0FBQ0g7O0FBQ0QsUUFBSVAsUUFBSixFQUFjO0FBQ1ZBLE1BQUFBLFFBQVE7QUFDWDtBQUNKLEdBUEQ7QUFRSDs7QUFDREgsc0JBQUEsR0FBeUJFLGNBQXpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL2pveS9kaXN0L2NsaWVudC9kZXYvZm91Yy5qcz9jNjE3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kaXNwbGF5Q29udGVudCA9IHZvaWQgMDtcbi8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byByZW1vdmUgSm95LmpzJyBuby1GT1VDIHN0eWxlcyB3b3JrYXJvdW5kIGZvciB1c2luZ1xuLy8gYHN0eWxlLWxvYWRlcmAgaW4gZGV2ZWxvcG1lbnQuIEl0IG11c3QgYmUgY2FsbGVkIGJlZm9yZSBoeWRyYXRpb24sIG9yIGVsc2Vcbi8vIHJlbmRlcmluZyB3b24ndCBoYXZlIHRoZSBjb3JyZWN0IGNvbXB1dGVkIHZhbHVlcyBpbiBlZmZlY3RzLlxuZnVuY3Rpb24gZGlzcGxheUNvbnRlbnQoY2FsbGJhY2spIHtcbiAgICAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBzZXRUaW1lb3V0KShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIHggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtam95LWhpZGUtZm91Y11cIiksIGkgPSB4Lmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgeFtpXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHhbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5kaXNwbGF5Q29udGVudCA9IGRpc3BsYXlDb250ZW50O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGlzcGxheUNvbnRlbnQiLCJjYWxsYmFjayIsIndpbmRvdyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJ4IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaSIsImxlbmd0aCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../joy/dist/client/dev/fouc.js\n");

/***/ }),

/***/ "../joy/dist/client/dev/on-demand-entries-utils.js":
/*!*********************************************************!*\
  !*** ../joy/dist/client/dev/on-demand-entries-utils.js ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n/* global location */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.setupPing = exports.closePing = exports.currentPage = void 0;\n\nvar fetch_1 = __importDefault(__webpack_require__(/*! ../../build/polyfills/fetch */ \"../joy/dist/build/polyfills/fetch/index.js\"));\n\nvar eventsource_1 = __webpack_require__(/*! ./error-overlay/eventsource */ \"../joy/dist/client/dev/error-overlay/eventsource.js\");\n\nvar evtSource;\n\nfunction closePing() {\n  if (evtSource) evtSource.close();\n  evtSource = null;\n}\n\nexports.closePing = closePing;\n\nfunction setupPing(assetPrefix, pathnameFn, retry) {\n  var pathname = pathnameFn(); // Make sure to only create new EventSource request if page has changed\n\n  if (pathname === exports.currentPage && !retry) return;\n  exports.currentPage = pathname; // close current EventSource connection\n\n  closePing();\n  var url = assetPrefix + \"/_joy/webpack-hmr?page=\" + exports.currentPage;\n  evtSource = (0, eventsource_1.getEventSourceWrapper)({\n    path: url,\n    timeout: 5000,\n    ondemand: 1\n  });\n  evtSource.addMessageListener(function (event) {\n    if (event.data.indexOf(\"{\") === -1) return;\n\n    try {\n      var payload = JSON.parse(event.data);\n\n      if (payload.invalid) {\n        // Payload can be invalid even if the page does not exist.\n        // So, we need to make sure it exists before reloading.\n        (0, fetch_1[\"default\"])(location.href, {\n          credentials: \"same-origin\"\n        }).then(function (pageRes) {\n          if (pageRes.status === 200) {\n            location.reload();\n          }\n        });\n      }\n    } catch (err) {\n      console.error(\"on-demand-entries failed to parse response\", err);\n    }\n  });\n}\n\nexports.setupPing = setupPing;\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vam95L2Rpc3QvY2xpZW50L2Rldi9vbi1kZW1hbmQtZW50cmllcy11dGlscy5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7QUFDYjs7QUFDQSxJQUFJQSxlQUFlLEdBQUksUUFBUSxLQUFLQSxlQUFkLElBQWtDLFVBQVVDLEdBQVYsRUFBZTtBQUNuRSxTQUFRQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWixHQUEwQkQsR0FBMUIsR0FBZ0M7QUFBRSxlQUFXQTtBQUFiLEdBQXZDO0FBQ0gsQ0FGRDs7QUFHQUUsOENBQTZDO0FBQUVHLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDO0FBQ0FELGlCQUFBLEdBQW9CQSxpQkFBQSxHQUFvQkEsbUJBQUEsR0FBc0IsS0FBSyxDQUFuRTs7QUFDQSxJQUFNSyxPQUFPLEdBQUdWLGVBQWUsQ0FBQ1csbUJBQU8sQ0FBQywrRUFBRCxDQUFSLENBQS9COztBQUNBLElBQU1DLGFBQWEsR0FBR0QsbUJBQU8sQ0FBQyx3RkFBRCxDQUE3Qjs7QUFDQSxJQUFJRSxTQUFKOztBQUNBLFNBQVNMLFNBQVQsR0FBcUI7QUFDakIsTUFBSUssU0FBSixFQUNJQSxTQUFTLENBQUNDLEtBQVY7QUFDSkQsRUFBQUEsU0FBUyxHQUFHLElBQVo7QUFDSDs7QUFDRFIsaUJBQUEsR0FBb0JHLFNBQXBCOztBQUNBLFNBQVNELFNBQVQsQ0FBbUJRLFdBQW5CLEVBQWdDQyxVQUFoQyxFQUE0Q0MsS0FBNUMsRUFBbUQ7QUFDL0MsTUFBTUMsUUFBUSxHQUFHRixVQUFVLEVBQTNCLENBRCtDLENBRS9DOztBQUNBLE1BQUlFLFFBQVEsS0FBS2IsT0FBTyxDQUFDSSxXQUFyQixJQUFvQyxDQUFDUSxLQUF6QyxFQUNJO0FBQ0paLEVBQUFBLG1CQUFBLEdBQXNCYSxRQUF0QixDQUwrQyxDQU0vQzs7QUFDQVYsRUFBQUEsU0FBUztBQUNULE1BQU1XLEdBQUcsR0FBTUosV0FBTiwrQkFBMkNWLE9BQU8sQ0FBQ0ksV0FBNUQ7QUFDQUksRUFBQUEsU0FBUyxHQUFHLENBQUMsR0FBR0QsYUFBYSxDQUFDUSxxQkFBbEIsRUFBeUM7QUFBRUMsSUFBQUEsSUFBSSxFQUFFRixHQUFSO0FBQWFHLElBQUFBLE9BQU8sRUFBRSxJQUF0QjtBQUE0QkMsSUFBQUEsUUFBUSxFQUFFO0FBQXRDLEdBQXpDLENBQVo7QUFDQVYsRUFBQUEsU0FBUyxDQUFDVyxrQkFBVixDQUE2QixVQUFDQyxLQUFELEVBQVc7QUFDcEMsUUFBSUEsS0FBSyxDQUFDQyxJQUFOLENBQVdDLE9BQVgsQ0FBbUIsR0FBbkIsTUFBNEIsQ0FBQyxDQUFqQyxFQUNJOztBQUNKLFFBQUk7QUFDQSxVQUFNQyxPQUFPLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXTCxLQUFLLENBQUNDLElBQWpCLENBQWhCOztBQUNBLFVBQUlFLE9BQU8sQ0FBQ0csT0FBWixFQUFxQjtBQUNqQjtBQUNBO0FBQ0EsU0FBQyxHQUFHckIsT0FBTyxXQUFYLEVBQXFCc0IsUUFBUSxDQUFDQyxJQUE5QixFQUFvQztBQUNoQ0MsVUFBQUEsV0FBVyxFQUFFO0FBRG1CLFNBQXBDLEVBRUdDLElBRkgsQ0FFUSxVQUFDQyxPQUFELEVBQWE7QUFDakIsY0FBSUEsT0FBTyxDQUFDQyxNQUFSLEtBQW1CLEdBQXZCLEVBQTRCO0FBQ3hCTCxZQUFBQSxRQUFRLENBQUNNLE1BQVQ7QUFDSDtBQUNKLFNBTkQ7QUFPSDtBQUNKLEtBYkQsQ0FjQSxPQUFPQyxHQUFQLEVBQVk7QUFDUkMsTUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQWMsNENBQWQsRUFBNERGLEdBQTVEO0FBQ0g7QUFDSixHQXBCRDtBQXFCSDs7QUFDRGxDLGlCQUFBLEdBQW9CRSxTQUFwQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9qb3kvZGlzdC9jbGllbnQvZGV2L29uLWRlbWFuZC1lbnRyaWVzLXV0aWxzLmpzPzBkMTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBnbG9iYWwgbG9jYXRpb24gKi9cbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2V0dXBQaW5nID0gZXhwb3J0cy5jbG9zZVBpbmcgPSBleHBvcnRzLmN1cnJlbnRQYWdlID0gdm9pZCAwO1xuY29uc3QgZmV0Y2hfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vYnVpbGQvcG9seWZpbGxzL2ZldGNoXCIpKTtcbmNvbnN0IGV2ZW50c291cmNlXzEgPSByZXF1aXJlKFwiLi9lcnJvci1vdmVybGF5L2V2ZW50c291cmNlXCIpO1xubGV0IGV2dFNvdXJjZTtcbmZ1bmN0aW9uIGNsb3NlUGluZygpIHtcbiAgICBpZiAoZXZ0U291cmNlKVxuICAgICAgICBldnRTb3VyY2UuY2xvc2UoKTtcbiAgICBldnRTb3VyY2UgPSBudWxsO1xufVxuZXhwb3J0cy5jbG9zZVBpbmcgPSBjbG9zZVBpbmc7XG5mdW5jdGlvbiBzZXR1cFBpbmcoYXNzZXRQcmVmaXgsIHBhdGhuYW1lRm4sIHJldHJ5KSB7XG4gICAgY29uc3QgcGF0aG5hbWUgPSBwYXRobmFtZUZuKCk7XG4gICAgLy8gTWFrZSBzdXJlIHRvIG9ubHkgY3JlYXRlIG5ldyBFdmVudFNvdXJjZSByZXF1ZXN0IGlmIHBhZ2UgaGFzIGNoYW5nZWRcbiAgICBpZiAocGF0aG5hbWUgPT09IGV4cG9ydHMuY3VycmVudFBhZ2UgJiYgIXJldHJ5KVxuICAgICAgICByZXR1cm47XG4gICAgZXhwb3J0cy5jdXJyZW50UGFnZSA9IHBhdGhuYW1lO1xuICAgIC8vIGNsb3NlIGN1cnJlbnQgRXZlbnRTb3VyY2UgY29ubmVjdGlvblxuICAgIGNsb3NlUGluZygpO1xuICAgIGNvbnN0IHVybCA9IGAke2Fzc2V0UHJlZml4fS9fam95L3dlYnBhY2staG1yP3BhZ2U9JHtleHBvcnRzLmN1cnJlbnRQYWdlfWA7XG4gICAgZXZ0U291cmNlID0gKDAsIGV2ZW50c291cmNlXzEuZ2V0RXZlbnRTb3VyY2VXcmFwcGVyKSh7IHBhdGg6IHVybCwgdGltZW91dDogNTAwMCwgb25kZW1hbmQ6IDEgfSk7XG4gICAgZXZ0U291cmNlLmFkZE1lc3NhZ2VMaXN0ZW5lcigoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmRhdGEuaW5kZXhPZihcIntcIikgPT09IC0xKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICBpZiAocGF5bG9hZC5pbnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgLy8gUGF5bG9hZCBjYW4gYmUgaW52YWxpZCBldmVuIGlmIHRoZSBwYWdlIGRvZXMgbm90IGV4aXN0LlxuICAgICAgICAgICAgICAgIC8vIFNvLCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSBpdCBleGlzdHMgYmVmb3JlIHJlbG9hZGluZy5cbiAgICAgICAgICAgICAgICAoMCwgZmV0Y2hfMS5kZWZhdWx0KShsb2NhdGlvbi5ocmVmLCB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCIsXG4gICAgICAgICAgICAgICAgfSkudGhlbigocGFnZVJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFnZVJlcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwib24tZGVtYW5kLWVudHJpZXMgZmFpbGVkIHRvIHBhcnNlIHJlc3BvbnNlXCIsIGVycik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMuc2V0dXBQaW5nID0gc2V0dXBQaW5nO1xuIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInNldHVwUGluZyIsImNsb3NlUGluZyIsImN1cnJlbnRQYWdlIiwiZmV0Y2hfMSIsInJlcXVpcmUiLCJldmVudHNvdXJjZV8xIiwiZXZ0U291cmNlIiwiY2xvc2UiLCJhc3NldFByZWZpeCIsInBhdGhuYW1lRm4iLCJyZXRyeSIsInBhdGhuYW1lIiwidXJsIiwiZ2V0RXZlbnRTb3VyY2VXcmFwcGVyIiwicGF0aCIsInRpbWVvdXQiLCJvbmRlbWFuZCIsImFkZE1lc3NhZ2VMaXN0ZW5lciIsImV2ZW50IiwiZGF0YSIsImluZGV4T2YiLCJwYXlsb2FkIiwiSlNPTiIsInBhcnNlIiwiaW52YWxpZCIsImxvY2F0aW9uIiwiaHJlZiIsImNyZWRlbnRpYWxzIiwidGhlbiIsInBhZ2VSZXMiLCJzdGF0dXMiLCJyZWxvYWQiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../joy/dist/client/dev/on-demand-entries-utils.js\n");

/***/ }),

/***/ "../../node_modules/regenerator-runtime/runtime.js":
/*!*********************************************************!*\
  !*** ../../node_modules/regenerator-runtime/runtime.js ***!
  \*********************************************************/
/***/ (function(module) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : 0
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),

/***/ "../joy/node_modules/@babel/runtime/regenerator/index.js":
/*!***************************************************************!*\
  !*** ../joy/node_modules/@babel/runtime/regenerator/index.js ***!
  \***************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ "../../node_modules/regenerator-runtime/runtime.js");


/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ var __webpack_exports__ = (__webpack_exec__("../joy/dist/client/dev/amp-dev.js"));
/******/ _N_E = __webpack_exports__;
/******/ }
]);